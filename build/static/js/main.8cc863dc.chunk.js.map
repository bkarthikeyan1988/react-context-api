{"version":3,"sources":["Learning/Context.js","Learning/Provider.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","Provider","props","useState","missionName","agentNumber","option","mission","setMission","value","data","isMissionAcception","children","Agents","AgentOne","AgentTwo","AgentBond","Context","Consumer","context","Fragment","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAEeA,MAAMC,gBCuBNC,EArBE,SAAAC,GAAU,IAAD,EACQC,mBAAS,CACnCC,YAAa,eACbC,YAAa,MACbC,OAAQ,iBAJU,mBACfC,EADe,KACNC,EADM,KAOtB,OACI,kBAAC,EAAeP,SAAhB,CACIQ,MAAO,CACHC,KAAMH,EACNI,mBAAoB,WAChBH,EAAW,2BAAID,GAAL,IAAcD,OAAQ,iBAIvCJ,EAAMU,WCdbC,G,MAAS,WACb,OAAO,kBAAC,EAAD,QAGHC,EAAW,WACf,OAAO,kBAAC,EAAD,OAGHC,EAAW,WACf,OAAO,kBAAC,EAAD,OAGHC,EAAY,WAChB,OACE,kBAACC,EAAQC,SAAT,MAEI,SAACC,GAAD,OACE,kBAAC,IAAMC,SAAP,KACE,iDACA,4CAAkBD,EAAQT,KAAKN,aAC/B,+CAAqBe,EAAQT,KAAKJ,QAClC,4BAAQe,UAAU,eAAeC,QAASH,EAAQR,oBAAlD,uBAyBGY,EAjBH,WACV,OACE,yBAAKF,UAAU,aAKb,yBAAKA,UAAU,YACb,+EACA,kBAAC,EAAD,KACE,kBAAC,EAAD,UCjCUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8cc863dc.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext();","import React, { useState } from 'react';\n\nimport MissionContext from \"./Context\";;\n\nconst Provider = props => {\n    const [mission, setMission] = useState({\n        missionName: 'Yoda Mission',\n        agentNumber: '007',\n        option: 'Not Accepted'\n    });\n\n    return (\n        <MissionContext.Provider\n            value={{\n                data: mission,\n                isMissionAcception: () => {\n                    setMission({...mission, option: \"Accepted\"})\n                }\n            }}\n        >\n            {props.children}\n        </MissionContext.Provider>\n    )\n}\n\nexport default Provider;\n","import React from 'react';\n// import ProblemAnalysis from './Learning/ProblemAnalysis';\nimport Provider from './Learning/Provider';\nimport Context from './Learning/Context';\nimport './App.css';\n\nconst Agents = () => {\n  return <AgentOne />\n}\n\nconst AgentOne = () => {\n  return <AgentTwo />\n}\n\nconst AgentTwo = () => {\n  return <AgentBond />\n}\n\nconst AgentBond = () => {\n  return (\n    <Context.Consumer>\n      {\n        (context) => (\n          <React.Fragment>\n            <h3>Agent Information</h3>\n            <p>Mission Name: {context.data.missionName}</p>\n            <h4>Mission Status: {context.data.option}</h4>\n            <button className=\"acceptButton\" onClick={context.isMissionAcception}>Accept Mission</button>\n          </React.Fragment>\n        )\n      }\n    </Context.Consumer>\n  )\n}\n\nconst App = () => {\n  return(\n    <div className=\"container\">\n      {/* <div className=\"learning\">\n        <h3>Learning 1: Problem Analysis</h3> \n        <ProblemAnalysis />\n      </div> */}\n      <div className=\"learning\">\n        <h3>Learning: Create Context, Provider and Consumer</h3>\n        <Provider>\n          <Agents />\n        </Provider>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}